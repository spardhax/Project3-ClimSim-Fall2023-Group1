knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(reshape2)
library(RcppCNPy)
library(gridExtra)
library(reticulate)
setwd('ClimSim')
getwd()
use_condaenv("myenv")
data_utils <- import_from_path("data_utils", path = "climsim_utils")
grid_path <- 'grid_info/ClimSim_low-res_grid-info.nc'
norm_path <- 'preprocessing/normalizations/'
xr <- import("xarray")
grid_info <- xr$open_dataset(grid_path)
input_mean <-
xr$open_dataset(paste0(norm_path, 'inputs/input_mean.nc'))
input_max <-
xr$open_dataset(paste0(norm_path, 'inputs/input_max.nc'))
input_min <-
xr$open_dataset(paste0(norm_path, 'inputs/input_min.nc'))
output_scale <-
xr$open_dataset(paste0(norm_path, 'outputs/output_scale.nc'))
data <- data_utils$data_utils(
grid_info = grid_info,
input_mean = input_mean,
input_max = input_max,
input_min = input_min,
output_scale = output_scale
)
data$set_to_v1_vars()
data_path <-
"/Users/mannyb/Documents/GitHub/Project3-ClimSim-Fall2023-Group1/output/"
sub_train_input_path <-
paste(data_path, 'input_train_sub.npy', sep = '')
sub_train_target_path <-
paste(data_path, 'target_train_sub.npy', sep = '')
sub_val_input_path <- paste(data_path, 'input_val_sub.npy', sep = '')
sub_val_target_path <- paste(data_path, 'target_val_sub.npy', sep = '')
data$input_train <- data$load_npy_file(sub_train_input_path)
data$target_train <- data$load_npy_file(sub_train_target_path)
data$input_val <- data$load_npy_file(sub_val_input_path)
data$target_val <- data$load_npy_file(sub_val_target_path)
const_model <- colMeans(data$target_train)
X <- data$input_train
bias_vector <- matrix(1, nrow(X), 1)
X <- cbind(X, bias_vector)
mlr_weights <- solve(t(X) %*% X) %*% t(X) %*% data$target_train
data$set_pressure_grid(data_split = 'val')
const_pred_val <-
matrix(const_model,
nrow(data$target_val),
length(const_model),
byrow = TRUE)
print(dim(const_pred_val))
X_val <- data$input_val
bias_vector_val <- matrix(1, nrow(X_val), 1)
X_val <- cbind(X_val, bias_vector_val)
mlr_pred_val <- X_val %*% mlr_weights
print(dim(mlr_pred_val))
data$model_names <- c('const', 'mlr')
preds <- list(const_pred_val, mlr_pred_val)
data$preds_val <- setNames(preds, data$model_names)
data$reweight_target(data_split = 'val')
data$reweight_preds(data_split = 'val')
data$metrics_names <- c('MAE', 'RMSE', 'R2', 'bias')
data$create_metrics_df(data_split = 'val')
plot_data <- bind_rows(lapply(data$metrics_names, function(metric) {
df <-
data.frame(matrix(
unlist(data$metrics_var_val),
nrow = length(data$model_names),
byrow = T
))
colnames(df) <- names(data$var_short_names)
df$Metric <- metric
return(df)
}), .id = 'Metric')
plot_data$Metric <- factor(
plot_data$Metric,
levels = c(1, 2, 3, 4),
labels = c("MAE", "RMSE", "R2", "bias")
)
plot_data %>%
pivot_longer(cols = -Metric,
names_to = "Variable",
values_to = "Value") %>%
ggplot(aes(x = Variable, y = Value, fill = Metric)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap( ~ Metric, scales = 'free_y') +
labs(title = "Metrics by Output Variable", y = "Value", x = "Output Variable") +
theme_minimal() +
theme(legend.title = element_text("Metric"),
legend.position = "right")
data$target_scoring <-
npyLoad(
"/Users/mannyb/Documents/GitHub/Project3-ClimSim-Fall2023-Group1/output/target_scoring_sub.npy"
)
data$input_scoring <-
npyLoad(
"/Users/mannyb/Documents/GitHub/Project3-ClimSim-Fall2023-Group1/output/input_scoring_sub.npy"
)
data$set_pressure_grid(data_split = 'scoring')
# Load Predictions
const_pred_scoring <-
matrix(rep(const_model, each = nrow(data$target_scoring)), nrow(data$target_scoring))
print(dim(const_pred_scoring))
X_scoring <- data$input_scoring
bias_vector_scoring <- matrix(1, nrow(X_scoring), 1)
X_scoring <- cbind(X_scoring, bias_vector_scoring)
mlr_pred_scoring <- X_scoring %*% mlr_weights
print(dim(mlr_pred_scoring))
data$model_names <- c('const', 'mlr')
preds <- list(const = const_pred_scoring, mlr = mlr_pred_scoring)
data$preds_scoring <- preds
data$reweight_target(data_split = 'scoring')
data$reweight_preds(data_split = 'scoring')
data$create_metrics_df(data_split = 'scoring')
data$metrics_names <- c('MAE', 'RMSE', 'R2', 'bias')
data$create_metrics_df(data_split = 'scoring')
plot_data <- bind_rows(lapply(data$metrics_names, function(metric) {
df <-
data.frame(matrix(
unlist(data$metrics_var_scoring),
nrow = length(data$model_names),
byrow = T
))
colnames(df) <- names(data$var_short_names)
df$Metric <- metric
return(df)
}), .id = 'Metric')
plot_data$Metric <- factor(
plot_data$Metric,
levels = c(1, 2, 3, 4),
labels = c("MAE", "RMSE", "R2", "bias")
)
plot_data %>%
pivot_longer(cols = -Metric,
names_to = "Variable",
values_to = "Value") %>%
ggplot(aes(x = Variable, y = Value, fill = Metric)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap( ~ Metric, scales = 'free_y') +
labs(title = "Metrics by Output Variable", y = "Value", x = "Output Variable") +
theme_minimal() +
theme(legend.title = element_text("Metric"),
legend.position = "right")
